/* Because of the nature of Chrome Extensions, adding the onclick functions to the
 * buttons in the html files is not allowed, so when the popup is loaded, add it with 
 * Javascript.
 */
window.onload = () => {
    var authButton = document.getElementById("auth");
    auth.onclick = authenticate;
    
    var regButton = document.getElementById("reg");
    regButton.onclick = register;
    
    var sub = document.getElementById("sub");
    sub.onclick = submit;
    
    
}

// constants we need to keep track of
var key = "";
var storedPasswords;


/*
 * Each user on a browser has a set key where all their passwords are stored. In 
 * future installments I plan on adding a PGP system where a user can only decrypt 
 * their passwords with their key, but for now it's all just local plaintext. This 
 * function loads all the passwords they currently have and loads the screen that 
 * displays them
 */
function authenticate() {
    // select the elements that we need, getting key if this is where to user first 
    // logged in
    if (!key) {
        key = document.getElementById("key").value;
    }
    storedPasswords = JSON.parse(localStorage.getItem(key));
    var list = document.getElementById("lister");
    var table = document.querySelector("table");
    
    // set the login element to not display, display the table of passwords
    document.getElementById("form").style.display = "None";
    list.style.display = "inherit";
    
    // for each password in this user, show them their username and their password 
    for (let key in storedPasswords) {
        if (storedPasswords.hasOwnProperty(key)) {
            table.innerHTML += "<tr>" +
            "<td>" + key + "</td>" +
            "<td>" + storedPasswords[key]["username"] + "</td>" +
            "<td>" + storedPasswords[key]['password']+ "</td>";
        }
    }
    
    // if this is a new key, give them a warning and let them set up their passwords
    if (!storedPasswords) {
        document.getElementById("lister").innerHTML += "<div id=\"warning\">No passwords available! add more below!</div>" 
        document.getElementById("reg").style.top = "30%";
        document.getElementById("reg").onclick = register;
    }
}


// this function just brings up the new registration screen
function register() {
    document.getElementById("lister").style.display = "None";
    document.getElementById("register").style.display = "inherit";
}

/*
 * This function is what creates new passwords and accounts for the user and adds it
 * to local storage. This right here is your proof that all data is stored locally!
 * As it is currently, the password is not generated by us but that will be added soon
 * once I port my own TroliAlgorithm from python. 
 */
function submit() {
    // get the fields the user filled in
    var name = document.getElementById("url");
    var user = document.getElementById("username");
    var password = document.getElementById("password");
    
    // if the name is blank, send the user back
    if(!name) {authenticate();}
    
    // reset the table display to normal
    if (document.getElementById("warning")) {
        document.getElementById("warning").style.display = "None";
        document.getElementById("reg").style.top = "";
    }
    
    // if passwords is null, create it
    if (!storedPasswords) { storedPasswords = {};}
    
    // add the entry to the JSON object stored on the user's computer
    storedPasswords[name.value] = {
        "username": user.value,
        "password": password.value,
    };
    
    // reset the JSON stored into what we have noe
    localStorage.setItem(key, JSON.stringify(storedPasswords));
    
    // reset the display
    document.getElementById("register").style.display = "None";
    name.value = "";
    user.value = "";
    password.value = "";
    
    // before, it would just stack the accounts on top of each other, now we delete 
    // all the previous entries so it can stack again. 
    var tds = document.querySelectorAll("td");
    for (let i = 0; i < tds.length; i++) {
        tds[i].parentElement.removeChild(tds[i]);
    }
    
    // redraw
    authenticate();
}